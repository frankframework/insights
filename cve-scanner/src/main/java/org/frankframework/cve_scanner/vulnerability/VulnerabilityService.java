package org.frankframework.cve_scanner.vulnerability;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.frankframework.cve_scanner.common.entityConnection.releasevulnerability.ReleaseVulnerability;
import org.frankframework.cve_scanner.common.entityConnection.releasevulnerability.ReleaseVulnerabilityRepository;
import org.frankframework.cve_scanner.common.enums.VulnerabilitySeverity;
import org.frankframework.shared.entity.Release;
import org.owasp.dependencycheck.Engine;
import org.owasp.dependencycheck.utils.Settings;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class VulnerabilityService {

    private final VulnerabilityRepository vulnerabilityRepository;
    private final ReleaseVulnerabilityRepository releaseVulnerabilityRepository;

    public VulnerabilityService(
            VulnerabilityRepository vulnerabilityRepository,
            ReleaseVulnerabilityRepository releaseVulnerabilityRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.releaseVulnerabilityRepository = releaseVulnerabilityRepository;
    }

    @Transactional
    public void scanRelease(Release release) {
        Path dependencyPath = Paths.get("dependency-archive/" + release.getTagName());
        if (!Files.exists(dependencyPath)) {
            System.out.println("Archief niet gevonden voor " + release.getTagName() + ", scan overgeslagen.");
            return;
        }

        System.out.println("Starten OWASP scan voor: " + release.getTagName());

        try (Engine engine = new Engine(new Settings())) {
            engine.getSettings().setBoolean(Settings.KEYS.AUTO_UPDATE, true);
            engine.scan(dependencyPath.toFile());
            engine.analyzeDependencies();

            updateVulnerabilitiesForRelease(release, engine.getDependencies());
        } catch (Exception e) {
            throw new RuntimeException("OWASP scan mislukt voor " + release.getTagName(), e);
        }
        System.out.println("OWASP scan voltooid voor: " + release.getTagName());
    }

    private void updateVulnerabilitiesForRelease(
            Release release, org.owasp.dependencycheck.dependency.Dependency[] scannedDependencies) {
        releaseVulnerabilityRepository.deleteAllByRelease(release);

        for (org.owasp.dependencycheck.dependency.Dependency scannedDependency : scannedDependencies) {
            for (org.owasp.dependencycheck.dependency.Vulnerability scannedVulnerability :
                    scannedDependency.getVulnerabilities()) {
                Vulnerability vulnerability = vulnerabilityRepository
                        .findById(scannedVulnerability.getName())
                        .orElseGet(() -> {
                            Vulnerability newVulnerability = new Vulnerability();
                            newVulnerability.setCveId(scannedVulnerability.getName());
                            newVulnerability.setSeverity(VulnerabilitySeverity.valueOf(
                                    scannedVulnerability.getUnscoredSeverity().toUpperCase()));
                            newVulnerability.setCvssScore(
                                    scannedVulnerability.getCvssV3() != null
                                            ? scannedVulnerability.getCvssV3().getImpactScore()
                                            : Double.valueOf(0.0));
                            newVulnerability.setDescription(scannedVulnerability.getDescription());
                            newVulnerability.setCwes(
                                    scannedVulnerability.getCwes().getEntries());
                            return vulnerabilityRepository.save(newVulnerability);
                        });

                ReleaseVulnerability link = new ReleaseVulnerability(release, vulnerability);
                releaseVulnerabilityRepository.save(link);
            }
        }
    }
}
