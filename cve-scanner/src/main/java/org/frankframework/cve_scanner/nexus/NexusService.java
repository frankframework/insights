package org.frankframework.cve_scanner.nexus;

import java.time.Duration;
import java.util.Comparator;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import org.frankframework.shared.entity.Release;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class NexusService {
    private final RestTemplate restTemplate;

    public NexusService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public Set<String> fetchAllReleaseVersions() {
        String apiUrl =
                "https://nexus.frankframework.org/service/rest/v1/search?repository=releases&group=org.frankframework.frankframework-parent";
        NexusSearchResponse response = restTemplate.getForObject(apiUrl, NexusSearchResponse.class);

        if (response != null && response.items() != null) {
            return response.items().stream()
                    .map(item -> item.version().replace("-frankdoc", ""))
                    .collect(Collectors.toSet());
        }
        return Set.of();
    }

    public Optional<String> findBestPomUrlForRelease(Release release) {
        String baseVersion = release.getTagName().replaceAll("^v", "");
        String apiUrl = String.format(
                "https://nexus.frankframework.org/service/rest/v1/search?repository=releases&group=org.frankframework.frankframework-parent&name=frankframework-parent&maven.baseVersion=%s",
                baseVersion);

        NexusSearchResponse response = restTemplate.getForObject(apiUrl, NexusSearchResponse.class);

        if (response == null || response.items() == null || release.getPublishedAt() == null) {
            return Optional.empty();
        }

        return response.items().stream()
                .flatMap(item -> item.assets().stream())
                .filter(asset -> asset.path().endsWith(".pom"))
                .min(Comparator.comparing(asset -> Duration.between(
                                release.getPublishedAt().toInstant(),
                                asset.lastModified().toInstant())
                        .abs()))
                .map(NexusAsset::downloadUrl);
    }
}
