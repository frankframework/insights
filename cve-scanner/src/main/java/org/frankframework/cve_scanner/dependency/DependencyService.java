package org.frankframework.cve_scanner.dependency;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.jar.JarFile;
import java.util.stream.Stream;
import org.apache.maven.model.Model;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
import org.frankframework.cve_scanner.common.entityConnection.releasedependency.ReleaseDependency;
import org.frankframework.cve_scanner.common.entityConnection.releasedependency.ReleaseDependencyRepository;
import org.frankframework.cve_scanner.nexus.NexusService;
import org.frankframework.shared.entity.Release;
import org.springframework.stereotype.Service;

@Service
public class DependencyService {

    private final NexusService nexusService;
    private final DependencyRepository dependencyRepository;
    private final ReleaseDependencyRepository releaseDependencyRepository;

    public DependencyService(
            NexusService nexusService,
            DependencyRepository dependencyRepository,
            ReleaseDependencyRepository releaseDependencyRepository) {
        this.nexusService = nexusService;
        this.dependencyRepository = dependencyRepository;
        this.releaseDependencyRepository = releaseDependencyRepository;
    }

    public void collectAndSaveDependencies(Release release) throws Exception {
        String pomUrl = nexusService
                .findBestPomUrlForRelease(release)
                .orElseThrow(() -> new RuntimeException("Geen POM gevonden voor release " + release.getTagName()));

        Path tempPomFile = downloadPom(pomUrl);
        Path outputDir = Paths.get("dependency-archive/" + release.getTagName());
        Files.createDirectories(outputDir);

        System.out.println("Starten van 'mvn dependency:copy-dependencies' voor " + release.getTagName());
        ProcessBuilder pb = new ProcessBuilder(
                "mvn",
                "dependency:copy-dependencies",
                "-f",
                tempPomFile.toString(),
                "-DoutputDirectory=" + outputDir.toAbsolutePath().toString());
        Process process = pb.start();
        int exitCode = process.waitFor();

        if (exitCode != 0) {
            throw new RuntimeException("Maven dependency collection is mislukt met exit code: " + exitCode);
        }
        System.out.println("Dependencies succesvol verzameld in: " + outputDir);

        analyzeAndSaveDependencies(release, outputDir);
        Files.delete(tempPomFile);
    }

    private void analyzeAndSaveDependencies(Release release, Path jarDirectory) throws IOException {
        try (Stream<Path> stream = Files.walk(jarDirectory)) {
            stream.filter(file -> file.toString().endsWith(".jar")).forEach(jarPath -> {
                Dependency dependency = parseGAV(jarPath);
                if (dependency.getGroupId() == null
                        || dependency.getArtifactId() == null
                        || dependency.getVersion() == null) {
                    return; // Sla JARs over waar we geen GAV voor kunnen vinden
                }

                Dependency dbDependency = dependencyRepository
                        .findByGroupIdAndArtifactIdAndVersion(
                                dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion())
                        .orElseGet(() -> dependencyRepository.save(dependency));

                ReleaseDependency link = new ReleaseDependency(release, dbDependency);
                releaseDependencyRepository.save(link);
            });
        }
    }

    private Path downloadPom(String pomUrl) throws IOException {
        URL url = new URL(pomUrl);
        Path tempFile = Files.createTempFile("pom-", ".xml");
        try (InputStream in = url.openStream()) {
            Files.copy(in, tempFile, StandardCopyOption.REPLACE_EXISTING);
        }
        return tempFile;
    }

    private Dependency parseGAV(Path jarPath) {
        Dependency dependency = new Dependency();
        dependency.setFileName(jarPath.getFileName().toString());
        try (JarFile jarFile = new JarFile(jarPath.toFile())) {
            jarFile.stream()
                    .filter(entry -> entry.getName().matches("META-INF/maven/.*/pom.xml"))
                    .findFirst()
                    .ifPresent(pomEntry -> {
                        try (InputStream pomStream = jarFile.getInputStream(pomEntry)) {
                            Model model = new MavenXpp3Reader().read(pomStream);
                            dependency.setGroupId(
                                    model.getGroupId() != null
                                            ? model.getGroupId()
                                            : model.getParent().getGroupId());
                            dependency.setArtifactId(model.getArtifactId());
                            dependency.setVersion(
                                    model.getVersion() != null
                                            ? model.getVersion()
                                            : model.getParent().getVersion());
                        } catch (Exception ignored) {
                        }
                    });
        } catch (Exception ignored) {
        }
        return dependency;
    }
}
