package org.frankframework.cve_scanner;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Set;
import org.frankframework.cve_scanner.dependency.DependencyService;
import org.frankframework.cve_scanner.nexus.NexusService;
import org.frankframework.cve_scanner.vulnerability.VulnerabilityService;
import org.frankframework.shared.entity.Release;
import org.frankframework.shared.repository.ReleaseRepository;
import org.springframework.stereotype.Service;

@Service
public class ScanOrchestrator {
    private final ReleaseRepository releaseRepository;
    private final NexusService nexusService;
    private final DependencyService dependencyService;
    private final VulnerabilityService vulnerabilityService;

	public ScanOrchestrator(ReleaseRepository releaseRepository, NexusService nexusService, DependencyService dependencyService, VulnerabilityService vulnerabilityService) {
		this.releaseRepository = releaseRepository;
		this.nexusService = nexusService;
		this.dependencyService = dependencyService;
		this.vulnerabilityService = vulnerabilityService;
	}

    public void executeDailyScan() {
        Set<String> newReleaseTags = findNewReleases();

        if (!newReleaseTags.isEmpty()) {
            System.out.println("Found new releases: " + newReleaseTags);
            onboardNewReleases(newReleaseTags);
        } else {
            System.out.println("No new releases found");
        }

        scanAllReleases();
    }

    private Set<String> findNewReleases() {
        System.out.println("Orchestrator: Releases ophalen uit Nexus...");
        Set<String> nexusReleaseTags = nexusService.fetchAllReleaseVersions();
        Set<String> databaseReleaseTags = releaseRepository.findAllTagNames();
        nexusReleaseTags.removeAll(databaseReleaseTags);
        return nexusReleaseTags;
    }

    private void onboardNewReleases(Set<String> newReleaseTags) {
        for (String tag : newReleaseTags) {
            System.out.println("Orchestrator: Onboarding " + tag);
            Release newRelease = new Release();
            newRelease.setId(tag);
            newRelease.setTagName(tag);
            newRelease.setName(tag);
            newRelease.setPublishedAt(OffsetDateTime.now());
            releaseRepository.save(newRelease);

            try {
                dependencyService.collectAndSaveDependencies(newRelease);
            } catch (Exception e) {
                System.err.println("Fout tijdens onboarding van release " + tag + ": " + e.getMessage());
            }
        }
    }

    private void scanAllReleases() {
        System.out.println("Orchestrator: Starten van CVE scans voor alle releases...");
        List<Release> allReleases = releaseRepository.findAll();
        for (Release release : allReleases) {
            try {
                vulnerabilityService.scanRelease(release);
            } catch (Exception e) {
                System.err.println("Fout tijdens scannen van release " + release.getTagName() + ": " + e.getMessage());
            }
        }
    }
}
