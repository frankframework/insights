package org.frankframework.cve_scanner;

import org.frankframework.cve_scanner.common.entityConnection.releasedependency.ReleaseDependency;
import org.frankframework.cve_scanner.common.entityConnection.releasedependency.ReleaseDependencyId;
import org.frankframework.cve_scanner.common.entityConnection.releasevulnerability.ReleaseVulnerability;
import org.frankframework.cve_scanner.common.entityConnection.releasevulnerability.ReleaseVulnerabilityId;
import org.frankframework.cve_scanner.dependency.Dependency;
import org.frankframework.cve_scanner.vulnerability.Vulnerability;
import org.frankframework.shared.entity.Release;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test to verify entity mappings compile and can be instantiated correctly.
 */
public class EntityMappingTest {

    @Test
    public void testReleaseDependencyCanBeCreated() {
        // Create mock entities
        Release release = new Release();
        release.setId("release-1");

        Dependency dependency = new Dependency();
        dependency.setId(UUID.randomUUID());
        dependency.setGroupId("org.test");
        dependency.setArtifactId("test-artifact");
        dependency.setVersion("1.0.0");

        // Create ReleaseDependency
        ReleaseDependency releaseDependency = new ReleaseDependency(release, dependency);

        // Verify it was created correctly
        assertNotNull(releaseDependency.getId());
        assertEquals(release, releaseDependency.getRelease());
        assertEquals(dependency, releaseDependency.getDependency());
        assertEquals(release.getId(), releaseDependency.getId().getRelease());
        assertEquals(dependency.getId(), releaseDependency.getId().getDependency());
    }

    @Test
    public void testReleaseVulnerabilityCanBeCreated() {
        // Create mock entities
        Release release = new Release();
        release.setId("release-1");

        Vulnerability vulnerability = new Vulnerability();
        vulnerability.setCveId("CVE-2023-1234");

        // Create ReleaseVulnerability
        ReleaseVulnerability releaseVulnerability = new ReleaseVulnerability(release, vulnerability);

        // Verify it was created correctly
        assertNotNull(releaseVulnerability.getId());
        assertEquals(release, releaseVulnerability.getRelease());
        assertEquals(vulnerability, releaseVulnerability.getVulnerability());
        assertEquals(release.getId(), releaseVulnerability.getId().getRelease());
        assertEquals(vulnerability.getCveId(), releaseVulnerability.getId().getVulnerability());
    }

    @Test
    public void testReleaseDependencyIdCanBeCreatedDirectly() {
        UUID dependencyId = UUID.randomUUID();
        ReleaseDependencyId id = new ReleaseDependencyId("release-1", dependencyId);

        assertEquals("release-1", id.getRelease());
        assertEquals(dependencyId, id.getDependency());
    }

    @Test
    public void testReleaseVulnerabilityIdCanBeCreatedDirectly() {
        ReleaseVulnerabilityId id = new ReleaseVulnerabilityId("release-1", "CVE-2023-1234");

        assertEquals("release-1", id.getRelease());
        assertEquals("CVE-2023-1234", id.getVulnerability());
    }
}