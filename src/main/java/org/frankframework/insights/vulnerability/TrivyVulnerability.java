package org.frankframework.insights.vulnerability;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import org.frankframework.insights.common.enums.VulnerabilitySeverity;

@JsonIgnoreProperties(ignoreUnknown = true)
public record TrivyVulnerability(
        String VulnerabilityID,
        String Title,
        String Description,
        String Severity,
        List<String> CweIDs,
        Map<String, TrivyCvssScore> CVSS) {

    public String buildDescription() {
        String description = Title != null ? Title : "";
        if (Description != null && !Description.isBlank()) {
            description += " | " + Description;
        }
        return description;
    }

    public Set<String> getCweIdsAsSet() {
        return (CweIDs != null) ? new HashSet<>(CweIDs) : Collections.emptySet();
    }

    public VulnerabilitySeverity toVulnerabilitySeverity() {
        return VulnerabilitySeverity.fromString(Severity);
    }

    /**
     * Extracts the CVSS score from the CVSS map, prioritizing sources and versions.
     * Priority order:
     * 1. NVD V3 score
     * 2. RedHat V3 score
     * 3. Any other V3 score
     * 4. Any V2 score
     *
     * @return The extracted CVSS score, or empty if none found
     */
    public Optional<Double> extractCvssScore() {
        if (CVSS == null || CVSS.isEmpty()) {
            return Optional.empty();
        }

        return Optional.ofNullable(CVSS.get("nvd"))
                .map(TrivyCvssScore::V3Score)
                .or(() -> Optional.ofNullable(CVSS.get("redhat")).map(TrivyCvssScore::V3Score))
                .or(() -> findFirstCvssScore(TrivyCvssScore::V3Score))
                .or(() -> findFirstCvssScore(TrivyCvssScore::V2Score));
    }

    /**
     * Helper method to find the first non-null score from the CVSS map
     * using the provided score extraction function.
     *
     * @param scoreExtractor A function to extract the desired score (e.g., V3Score or V2Score)
     * @return The first non-null score found, or empty Optional
     */
    private Optional<Double> findFirstCvssScore(Function<TrivyCvssScore, Double> scoreExtractor) {
        if (CVSS == null) {
            return Optional.empty();
        }

        for (TrivyCvssScore score : CVSS.values()) {
            if (score != null) {
                Double extractedScore = scoreExtractor.apply(score);
                if (extractedScore != null) {
                    return Optional.of(extractedScore);
                }
            }
        }
        return Optional.empty();
    }
}
