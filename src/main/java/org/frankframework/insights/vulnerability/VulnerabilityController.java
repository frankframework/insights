package org.frankframework.insights.vulnerability;

import java.util.Collections;
import java.util.Set;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/vulnerabilities")
public class VulnerabilityController {
    private final VulnerabilityService vulnerabilityService;

    public VulnerabilityController(VulnerabilityService vulnerabilityService) {
        this.vulnerabilityService = vulnerabilityService;
    }

    /**
     * Fetches all vulnerabilities associated with a given release ID.
     * @param releaseId The ID of the release to fetch vulnerabilities for
     * @return Set of vulnerabilities associated with the release
     */
    @GetMapping("/release/{releaseId}")
    public ResponseEntity<Set<VulnerabilityResponse>> getVulnerabilitiesByReleaseId(@PathVariable String releaseId) {
        Set<VulnerabilityResponse> vulnerabilities = vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId);
        if (vulnerabilities == null) vulnerabilities = Collections.emptySet();
        return ResponseEntity.status(HttpStatus.OK).body(vulnerabilities);
    }
}
