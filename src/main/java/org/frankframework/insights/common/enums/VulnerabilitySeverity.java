package org.frankframework.insights.common.enums;

import java.util.Arrays;

public enum VulnerabilitySeverity {
    CRITICAL(9.0, 10.0),
    HIGH(7.0, 8.9),
    MEDIUM(4.0, 6.9),
    LOW(0.1, 3.9),
    NONE(0.0, 0.0),
    UNKNOWN(0.0, 0.0);

    private static final int MAX_CVSS_SCORE = 10;
    private static final double CRITICAL_REPRESENTATIVE_SCORE = 9.5;
    private static final double HIGH_REPRESENTATIVE_SCORE = 8.0;
    private static final double MEDIUM_REPRESENTATIVE_SCORE = 5.5;
    private static final double LOW_REPRESENTATIVE_SCORE = 2.0;
    private final double minScore;
    private final double maxScore;

    VulnerabilitySeverity(double minScore, double maxScore) {
        this.minScore = minScore;
        this.maxScore = maxScore;
    }

    /**
     * Determines the vulnerability severity based on a numeric CVSS score.
     * The ranges are based on the official CVSS v3.x standard.
     *
     * @param score The CVSS score, expected to be between 0.0 and 10.0.
     * @return The calculated VulnerabilitySeverity.
     */
    public static VulnerabilitySeverity fromScore(double score) {
        if (score < 0 || score > MAX_CVSS_SCORE) {
            return UNKNOWN;
        }

        return Arrays.stream(values())
                .filter(severity -> score >= severity.minScore && score <= severity.maxScore)
                .findFirst()
                .orElse(UNKNOWN);
    }

    /**
     * Gets a representative CVSS score for this severity level.
     * Used when only severity is known but no actual CVSS score is available.
     *
     * @return A representative score for this severity.
     */
    public double getRepresentativeScore() {
        return switch (this) {
            case CRITICAL -> CRITICAL_REPRESENTATIVE_SCORE;
            case HIGH -> HIGH_REPRESENTATIVE_SCORE;
            case MEDIUM -> MEDIUM_REPRESENTATIVE_SCORE;
            case LOW -> LOW_REPRESENTATIVE_SCORE;
            case NONE, UNKNOWN -> 0.0;
        };
    }
}
