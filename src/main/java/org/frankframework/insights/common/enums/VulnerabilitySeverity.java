package org.frankframework.insights.common.enums;

public enum VulnerabilitySeverity {
    CRITICAL,
    HIGH,
    MEDIUM,
    LOW,
    NONE,
    UNKNOWN;

    private static final double CRITICAL_REPRESENTATIVE_SCORE = 9.5;
    private static final double HIGH_REPRESENTATIVE_SCORE = 8.0;
    private static final double MEDIUM_REPRESENTATIVE_SCORE = 5.5;
    private static final double LOW_REPRESENTATIVE_SCORE = 2.0;

    /**
     * Parses a severity string (typically from external sources like Trivy)
     * and converts it to a VulnerabilitySeverity enum value.
     *
     * @param severityString The severity string to parse (case-insensitive)
     * @return The corresponding VulnerabilitySeverity, or UNKNOWN if not recognized
     */
    public static VulnerabilitySeverity fromString(String severityString) {
        if (severityString == null || severityString.isBlank()) {
            return UNKNOWN;
        }

        return switch (severityString.toUpperCase()) {
            case "CRITICAL" -> CRITICAL;
            case "HIGH" -> HIGH;
            case "MEDIUM" -> MEDIUM;
            case "LOW" -> LOW;
            case "NONE" -> NONE;
            default -> UNKNOWN;
        };
    }

    /**
     * Gets a representative CVSS score for this severity level.
     * Used when only severity is known but no actual CVSS score is available.
     *
     * @return A representative score for this severity.
     */
    public double getRepresentativeScore() {
        return switch (this) {
            case CRITICAL -> CRITICAL_REPRESENTATIVE_SCORE;
            case HIGH -> HIGH_REPRESENTATIVE_SCORE;
            case MEDIUM -> MEDIUM_REPRESENTATIVE_SCORE;
            case LOW -> LOW_REPRESENTATIVE_SCORE;
            case NONE, UNKNOWN -> 0.0;
        };
    }
}
