import { TestBed } from '@angular/core/testing';
import { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';
import { provideHttpClient } from '@angular/common/http';
import { VulnerabilityService, Vulnerability, VulnerabilitySeverities } from './vulnerability.service';
import { AppService } from '../app.service';

describe('VulnerabilityService', () => {
  let service: VulnerabilityService;
  let httpMock: HttpTestingController;
  let appService: AppService;

  const mockVulnerabilities: Vulnerability[] = [
    {
      cveId: 'CVE-2024-0001',
      severity: VulnerabilitySeverities.CRITICAL,
      cvssScore: 10,
      description: 'Critical vulnerability',
      cwes: ['CWE-78', 'CWE-94']
    },
    {
      cveId: 'CVE-2024-0002',
      severity: VulnerabilitySeverities.HIGH,
      cvssScore: 8.5,
      description: 'High severity vulnerability',
      cwes: ['CWE-79']
    },
    {
      cveId: 'CVE-2024-0003',
      severity: VulnerabilitySeverities.MEDIUM,
      cvssScore: 5,
      description: 'Medium severity vulnerability',
      cwes: []
    }
  ];

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        VulnerabilityService,
        AppService,
        provideHttpClient(),
        provideHttpClientTesting()
      ],
    });
    service = TestBed.inject(VulnerabilityService);
    httpMock = TestBed.inject(HttpTestingController);
    appService = TestBed.inject(AppService);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('getVulnerabilitiesByReleaseId', () => {
    it('should fetch vulnerabilities for a given release ID', () => {
      const releaseId = 'release-123';
      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities).toEqual(mockVulnerabilities);
        expect(vulnerabilities.length).toBe(3);
        expect(vulnerabilities[0].cveId).toBe('CVE-2024-0001');
      });

      const request = httpMock.expectOne(expectedUrl);

      expect(request.request.method).toBe('GET');
      request.flush(mockVulnerabilities);
    });

    it('should return empty array when no vulnerabilities found', () => {
      const releaseId = 'release-empty';
      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities).toEqual([]);
        expect(vulnerabilities.length).toBe(0);
      });

      const request = httpMock.expectOne(expectedUrl);

      expect(request.request.method).toBe('GET');
      request.flush([]);
    });

    it('should handle vulnerabilities with all severity levels', () => {
      const releaseId = 'release-all-severities';
      const allSeverities: Vulnerability[] = [
        {
          cveId: 'CVE-CRITICAL',
          severity: VulnerabilitySeverities.CRITICAL,
          cvssScore: 10,
          description: 'Critical',
          cwes: []
        },
        {
          cveId: 'CVE-HIGH',
          severity: VulnerabilitySeverities.HIGH,
          cvssScore: 8,
          description: 'High',
          cwes: []
        },
        {
          cveId: 'CVE-MEDIUM',
          severity: VulnerabilitySeverities.MEDIUM,
          cvssScore: 5,
          description: 'Medium',
          cwes: []
        },
        {
          cveId: 'CVE-LOW',
          severity: VulnerabilitySeverities.LOW,
          cvssScore: 2,
          description: 'Low',
          cwes: []
        },
        {
          cveId: 'CVE-NONE',
          severity: VulnerabilitySeverities.NONE,
          cvssScore: 0,
          description: 'None',
          cwes: []
        },
        {
          cveId: 'CVE-UNKNOWN',
          severity: VulnerabilitySeverities.UNKNOWN,
          cvssScore: 0,
          description: 'Unknown',
          cwes: []
        }
      ];

      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities.length).toBe(6);
        expect(vulnerabilities[0].severity).toBe(VulnerabilitySeverities.CRITICAL);
        expect(vulnerabilities[1].severity).toBe(VulnerabilitySeverities.HIGH);
        expect(vulnerabilities[2].severity).toBe(VulnerabilitySeverities.MEDIUM);
        expect(vulnerabilities[3].severity).toBe(VulnerabilitySeverities.LOW);
        expect(vulnerabilities[4].severity).toBe(VulnerabilitySeverities.NONE);
        expect(vulnerabilities[5].severity).toBe(VulnerabilitySeverities.UNKNOWN);
      });

      const request = httpMock.expectOne(expectedUrl);
      request.flush(allSeverities);
    });

    it('should handle vulnerabilities with multiple CWEs', () => {
      const releaseId = 'release-multiple-cwes';
      const multiCweVulns: Vulnerability[] = [
        {
          cveId: 'CVE-2024-MULTI',
          severity: VulnerabilitySeverities.CRITICAL,
          cvssScore: 9.8,
          description: 'Multiple CWEs vulnerability',
          cwes: ['CWE-78', 'CWE-79', 'CWE-89', 'CWE-94']
        }
      ];

      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities[0].cwes.length).toBe(4);
        expect(vulnerabilities[0].cwes).toContain('CWE-78');
        expect(vulnerabilities[0].cwes).toContain('CWE-79');
        expect(vulnerabilities[0].cwes).toContain('CWE-89');
        expect(vulnerabilities[0].cwes).toContain('CWE-94');
      });

      const request = httpMock.expectOne(expectedUrl);
      request.flush(multiCweVulns);
    });

    it('should handle vulnerabilities with no CWEs', () => {
      const releaseId = 'release-no-cwes';
      const noCweVulns: Vulnerability[] = [
        {
          cveId: 'CVE-2024-NO-CWE',
          severity: VulnerabilitySeverities.LOW,
          cvssScore: 2.5,
          description: 'No CWEs',
          cwes: []
        }
      ];

      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities[0].cwes).toEqual([]);
        expect(vulnerabilities[0].cwes.length).toBe(0);
      });

      const request = httpMock.expectOne(expectedUrl);
      request.flush(noCweVulns);
    });

    it('should handle CVSS scores with decimal values', () => {
      const releaseId = 'release-decimal-scores';
      const decimalScores: Vulnerability[] = [
        {
          cveId: 'CVE-2024-DECIMAL',
          severity: VulnerabilitySeverities.HIGH,
          cvssScore: 7.89,
          description: 'Decimal score',
          cwes: []
        }
      ];

      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities[0].cvssScore).toBe(7.89);
      });

      const request = httpMock.expectOne(expectedUrl);
      request.flush(decimalScores);
    });

    it('should handle empty descriptions', () => {
      const releaseId = 'release-empty-desc';
      const emptyDescVulns: Vulnerability[] = [
        {
          cveId: 'CVE-2024-EMPTY-DESC',
          severity: VulnerabilitySeverities.MEDIUM,
          cvssScore: 5,
          description: '',
          cwes: ['CWE-200']
        }
      ];

      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities[0].description).toBe('');
      });

      const request = httpMock.expectOne(expectedUrl);
      request.flush(emptyDescVulns);
    });

    it('should handle long descriptions', () => {
      const releaseId = 'release-long-desc';
      const longDesc = 'This is a very long description that would normally trigger the see more button in the UI. '.repeat(10);
      const longDescVulns: Vulnerability[] = [
        {
          cveId: 'CVE-2024-LONG-DESC',
          severity: VulnerabilitySeverities.CRITICAL,
          cvssScore: 9.5,
          description: longDesc,
          cwes: ['CWE-79']
        }
      ];

      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities[0].description.length).toBeGreaterThan(100);
        expect(vulnerabilities[0].description).toBe(longDesc);
      });

      const request = httpMock.expectOne(expectedUrl);
      request.flush(longDescVulns);
    });

    it('should construct correct API URL', () => {
      const releaseId = 'test-release-id-123';
      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe();

      const request = httpMock.expectOne(expectedUrl);

      expect(request.request.url).toBe(expectedUrl);
      request.flush([]);
    });

    it('should handle special characters in release ID', () => {
      const releaseId = 'RE_kwDOAIg5ds4MnUo_';
      const expectedUrl = appService.createAPIUrl(`vulnerabilities/release/${releaseId}`);

      service.getVulnerabilitiesByReleaseId(releaseId).subscribe((vulnerabilities) => {
        expect(vulnerabilities).toEqual(mockVulnerabilities);
      });

      const request = httpMock.expectOne(expectedUrl);

      expect(request.request.method).toBe('GET');
      request.flush(mockVulnerabilities);
    });
  });
});
