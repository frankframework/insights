import { Component, EventEmitter, Input, Output, OnChanges, inject, ElementRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Vulnerability, VulnerabilitySeverity } from '../../../services/vulnerability.service';
import { OffCanvasComponent } from '../../../components/off-canvas/off-canvas.component';
import { marked } from 'marked';

@Component({
  selector: 'app-vulnerability-details-off-canvas',
  standalone: true,
  imports: [CommonModule, OffCanvasComponent],
  templateUrl: './vulnerability-details-off-canvas.html',
  styleUrl: './vulnerability-details-off-canvas.scss',
})
export class VulnerabilityDetailsOffCanvas implements OnChanges {
  @Input() vulnerability: Vulnerability | null = null;
  @Output() closeVulnerabilityCanvas = new EventEmitter<void>();

  public isDescriptionExpanded = false;
  public showSeeMoreButton = false;

  private sanitizer = inject(DomSanitizer);
  private elementRef = inject(ElementRef);

  ngOnChanges(): void {
    this.isDescriptionExpanded = false;
    setTimeout(() => this.checkDescriptionOverflow(), 0);
  }

  public onClose(): void {
    this.closeVulnerabilityCanvas.emit();
  }

  public toggleDescription(): void {
    this.isDescriptionExpanded = !this.isDescriptionExpanded;
  }

  public getSeverityClass(severity: VulnerabilitySeverity): string {
    return `severity-${severity.toLowerCase()}`;
  }

  public getCweUrl(cwe: string): string {
    const cweNumber = cwe.match(/\d+/)?.[0];
    return cweNumber ? `https://cwe.mitre.org/data/definitions/${cweNumber}.html` : '#';
  }

  public getMarkdownHtml(markdown: string): SafeHtml {
    const html = marked(markdown);
    const htmlWithTarget = (html as string).replaceAll('<a ', '<a target="_blank" rel="noopener noreferrer" ');
    return this.sanitizer.bypassSecurityTrustHtml(htmlWithTarget);
  }

  private checkDescriptionOverflow(): void {
    const descriptionElement = this.elementRef.nativeElement.querySelector('.cve-description');

    this.showSeeMoreButton = descriptionElement
      ? descriptionElement.scrollHeight > descriptionElement.clientHeight
      : false;
  }
}
