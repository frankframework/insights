import { ComponentFixture, TestBed } from '@angular/core/testing';
import { VulnerabilityDetailsOffCanvas } from './vulnerability-details-off-canvas';
import { Vulnerability, VulnerabilitySeverities } from '../../../services/vulnerability.service';

describe('VulnerabilityDetailsOffCanvas', () => {
  let component: VulnerabilityDetailsOffCanvas;
  let fixture: ComponentFixture<VulnerabilityDetailsOffCanvas>;

  const mockVulnerability: Vulnerability = {
    cveId: 'CVE-2024-0001',
    severity: VulnerabilitySeverities.CRITICAL,
    cvssScore: 9.8,
    description:
      'Critical vulnerability with a very long description that should trigger the see more button because it exceeds six lines of text when rendered in the UI component with normal font size and line height settings.',
    cwes: ['CWE-79', 'CWE-89'],
  };

  const mockVulnerabilityWithMarkdown: Vulnerability = {
    cveId: 'CVE-2024-0002',
    severity: VulnerabilitySeverities.HIGH,
    cvssScore: 7.5,
    description:
      '## Vulnerability Details\n\nThis is a **critical** vulnerability that allows [remote code execution](https://example.com).\n\n### Impact\n- System compromise\n- Data loss',
    cwes: ['CWE-22'],
  };

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [VulnerabilityDetailsOffCanvas],
    }).compileComponents();

    fixture = TestBed.createComponent(VulnerabilityDetailsOffCanvas);
    component = fixture.componentInstance;
  });

  describe('Component Initialization', () => {
    it('should create', () => {
      expect(component).toBeTruthy();
    });

    it('should initialize with null vulnerability', () => {
      expect(component.vulnerability).toBeNull();
    });

    it('should initialize with isDescriptionExpanded as false', () => {
      expect(component.isDescriptionExpanded).toBe(false);
    });

    it('should initialize with showSeeMoreButton as false', () => {
      expect(component.showSeeMoreButton).toBe(false);
    });
  });

  describe('ngOnChanges', () => {
    it('should reset isDescriptionExpanded to false', () => {
      component.isDescriptionExpanded = true;
      component.ngOnChanges();

      expect(component.isDescriptionExpanded).toBe(false);
    });

    it('should call checkDescriptionOverflow after timeout', (done) => {
      spyOn<any>(component, 'checkDescriptionOverflow');
      component.ngOnChanges();

      // eslint-disable-next-line no-undef
      setTimeout(() => {
        expect(component['checkDescriptionOverflow']).toHaveBeenCalledWith();
        done();
      }, 0)
    });
  });

  describe('Close functionality', () => {
    it('should emit close event when onClose is called', () => {
      spyOn(component.closeCanvas, 'emit');
      component.onClose();

      expect(component.closeCanvas.emit).toHaveBeenCalledWith();
    });
  });

  describe('Description Expansion', () => {
    it('should toggle description expansion from false to true', () => {
      component.isDescriptionExpanded = false;
      component.toggleDescription();

      expect(component.isDescriptionExpanded).toBe(true);
    });

    it('should toggle description expansion from true to false', () => {
      component.isDescriptionExpanded = true;
      component.toggleDescription();

      expect(component.isDescriptionExpanded).toBe(false);
    });

    it('should toggle multiple times correctly', () => {
      expect(component.isDescriptionExpanded).toBe(false);
      component.toggleDescription();

      expect(component.isDescriptionExpanded).toBe(true);
      component.toggleDescription();

      expect(component.isDescriptionExpanded).toBe(false);
      component.toggleDescription();

      expect(component.isDescriptionExpanded).toBe(true);
    });
  });

  describe('Severity Styling', () => {
    it('should return correct CSS class for CRITICAL severity', () => {
      expect(component.getSeverityClass(VulnerabilitySeverities.CRITICAL)).toBe('severity-critical');
    });

    it('should return correct CSS class for HIGH severity', () => {
      expect(component.getSeverityClass(VulnerabilitySeverities.HIGH)).toBe('severity-high');
    });

    it('should return correct CSS class for MEDIUM severity', () => {
      expect(component.getSeverityClass(VulnerabilitySeverities.MEDIUM)).toBe('severity-medium');
    });

    it('should return correct CSS class for LOW severity', () => {
      expect(component.getSeverityClass(VulnerabilitySeverities.LOW)).toBe('severity-low');
    });

    it('should return correct CSS class for NONE severity', () => {
      expect(component.getSeverityClass(VulnerabilitySeverities.NONE)).toBe('severity-none');
    });

    it('should return correct CSS class for UNKNOWN severity', () => {
      expect(component.getSeverityClass(VulnerabilitySeverities.UNKNOWN)).toBe('severity-unknown');
    });
  });

  describe('CWE URL Generation', () => {
    it('should generate correct CWE URL from CWE-79', () => {
      expect(component.getCweUrl('CWE-79')).toBe('https://cwe.mitre.org/data/definitions/79.html');
    });

    it('should generate correct CWE URL from CWE-89', () => {
      expect(component.getCweUrl('CWE-89')).toBe('https://cwe.mitre.org/data/definitions/89.html');
    });

    it('should generate correct CWE URL from CWE-200', () => {
      expect(component.getCweUrl('CWE-200')).toBe('https://cwe.mitre.org/data/definitions/200.html');
    });

    it('should handle invalid CWE format gracefully', () => {
      expect(component.getCweUrl('INVALID')).toBe('#');
    });

    it('should handle empty CWE string', () => {
      expect(component.getCweUrl('')).toBe('#');
    });

    it('should extract number from CWE with extra text', () => {
      expect(component.getCweUrl('CWE-200: Information Exposure')).toBe(
        'https://cwe.mitre.org/data/definitions/200.html',
      );
    });

    it('should handle CWE with leading zeros', () => {
      expect(component.getCweUrl('CWE-0079')).toBe('https://cwe.mitre.org/data/definitions/0079.html');
    });
  });

  describe('Markdown Rendering', () => {
    it('should convert markdown to HTML', () => {
      const markdown = '## Heading\n\nThis is **bold** text.';
      const result = component.getMarkdownHtml(markdown);

      expect(result).toBeTruthy();
    });

    it('should add target="_blank" to links', () => {
      const markdown = '[Click here](https://example.com)';
      const result = component.getMarkdownHtml(markdown);
      const htmlString = result.toString();

      expect(htmlString).toContain('target="_blank"');
      expect(htmlString).toContain('rel="noopener noreferrer"');
    });

    it('should handle markdown with multiple links', () => {
      const markdown = '[Link 1](https://example1.com) and [Link 2](https://example2.com)';
      const result = component.getMarkdownHtml(markdown);
      const htmlString = result.toString();

      expect(htmlString).toContain('target="_blank"');
      expect(htmlString).toContain('rel="noopener noreferrer"');
    });

    it('should handle markdown with headings', () => {
      const markdown = '## Heading 2\n### Heading 3';
      const result = component.getMarkdownHtml(markdown);
      const htmlString = result.toString();

      expect(htmlString).toContain('<h2');
      expect(htmlString).toContain('<h3');
    });

    it('should handle markdown with lists', () => {
      const markdown = '- Item 1\n- Item 2\n- Item 3';
      const result = component.getMarkdownHtml(markdown);
      const htmlString = result.toString();

      expect(htmlString).toContain('<li');
    });

    it('should handle markdown with code blocks', () => {
      const markdown = '```javascript\nconst x = 10;\n```';
      const result = component.getMarkdownHtml(markdown);
      const htmlString = result.toString();

      expect(htmlString).toContain('code');
    });

    it('should handle plain text without markdown', () => {
      const plainText = 'This is plain text without markdown.';
      const result = component.getMarkdownHtml(plainText);

      expect(result).toBeTruthy();
    });

    it('should handle empty string', () => {
      const result = component.getMarkdownHtml('');

      expect(result).toBeTruthy();
    });

    it('should sanitize HTML to prevent XSS', () => {
      const markdown = 'Normal text';
      const result = component.getMarkdownHtml(markdown);

      expect(result).toBeTruthy();
    });
  });

  describe('Description Overflow Detection', () => {
    it('should set showSeeMoreButton to false when element does not overflow', () => {
      const mockElement = document.createElement('div');
      mockElement.className = 'cve-description';
      Object.defineProperty(mockElement, 'scrollHeight', { value: 100, configurable: true });
      Object.defineProperty(mockElement, 'clientHeight', { value: 100, configurable: true });
      document.body.append(mockElement);

      component['checkDescriptionOverflow']();

      expect(component.showSeeMoreButton).toBe(false);
      mockElement.remove();
    });

    it('should set showSeeMoreButton to true when element overflows', () => {
      const mockElement = document.createElement('div');
      mockElement.className = 'cve-description';
      Object.defineProperty(mockElement, 'scrollHeight', { value: 200, configurable: true });
      Object.defineProperty(mockElement, 'clientHeight', { value: 100, configurable: true });
      document.body.append(mockElement);

      component['checkDescriptionOverflow']();

      expect(component.showSeeMoreButton).toBe(true);
      mockElement.remove();
    });

    it('should set showSeeMoreButton to false when element is not found', () => {
      component['checkDescriptionOverflow']();

      expect(component.showSeeMoreButton).toBe(false);
    });
  });

  describe('Edge Cases', () => {
    it('should handle vulnerability with null description', () => {
      const result = component.getMarkdownHtml('');

      expect(result).toBeTruthy();
    });

    it('should handle vulnerability with no CWEs', () => {
      component.vulnerability = {
        cveId: 'CVE-2024-9999',
        severity: VulnerabilitySeverities.HIGH,
        cvssScore: 8,
        description: 'No CWEs',
        cwes: [],
      };
      fixture.detectChanges();

      expect(component.vulnerability.cwes).toEqual([]);
    });

    it('should handle vulnerability with very long CVE ID', () => {
      component.vulnerability = {
        cveId: 'CVE-2024-0001-VERY-LONG-IDENTIFIER-WITH-EXTRA-TEXT',
        severity: VulnerabilitySeverities.LOW,
        cvssScore: 3,
        description: 'Test',
        cwes: [],
      };
      fixture.detectChanges();

      expect(component.vulnerability.cveId).toContain('VERY-LONG');
    });

    it('should handle markdown with special characters', () => {
      const markdown = 'Text with <script>alert("XSS")</script> and other special chars: & < > "';
      const result = component.getMarkdownHtml(markdown);

      expect(result).toBeTruthy();
    });

    it('should handle very long markdown text', () => {
      const longMarkdown = 'Lorem ipsum dolor sit amet. '.repeat(100);
      const result = component.getMarkdownHtml(longMarkdown);

      expect(result).toBeTruthy();
    });
  });

  describe('Integration Tests', () => {
    it('should properly display vulnerability when vulnerability input is set', () => {
      component.vulnerability = mockVulnerability;
      fixture.detectChanges();

      expect(component.vulnerability).toBe(mockVulnerability);
    });

    it('should reset state when vulnerability changes', () => {
      component.vulnerability = mockVulnerability;
      component.isDescriptionExpanded = true;

      component.vulnerability = mockVulnerabilityWithMarkdown;
      component.ngOnChanges();

      expect(component.isDescriptionExpanded).toBe(false);
    });

    it('should handle rapid vulnerability changes', () => {
      component.vulnerability = mockVulnerability;
      component.ngOnChanges();

      component.vulnerability = mockVulnerabilityWithMarkdown;
      component.ngOnChanges();

      component.vulnerability = null;
      component.ngOnChanges();

      expect(component.isDescriptionExpanded).toBe(false);
    });
  });
});
