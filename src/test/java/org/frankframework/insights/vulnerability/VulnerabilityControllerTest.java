package org.frankframework.insights.vulnerability;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.Collections;
import java.util.Set;
import org.frankframework.insights.common.enums.VulnerabilitySeverity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

@WebMvcTest(VulnerabilityController.class)
public class VulnerabilityControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @TestConfiguration
    public static class TestConfig {
        @Bean
        public VulnerabilityService vulnerabilityService() {
            return mock(VulnerabilityService.class);
        }
    }

    @BeforeEach
    public void resetMocks() {
        reset(vulnerabilityService);
    }

    @Test
    public void getVulnerabilitiesByReleaseId_returnsOkWithVulnerabilities() throws Exception {
        String releaseId = "release-123";
        VulnerabilityResponse vuln1 = new VulnerabilityResponse(
                "CVE-2023-1234",
                VulnerabilitySeverity.HIGH,
                VulnerabilitySeverity.HIGH.getRepresentativeScore(),
                "SQL Injection vulnerability",
                Set.of("CWE-89"));
        VulnerabilityResponse vuln2 = new VulnerabilityResponse(
                "CVE-2023-5678",
                VulnerabilitySeverity.CRITICAL,
                VulnerabilitySeverity.CRITICAL.getRepresentativeScore(),
                "Remote Code Execution",
                Set.of("CWE-78", "CWE-502"));
        Set<VulnerabilityResponse> vulnerabilities = Set.of(vuln1, vuln2);

        when(vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId)).thenReturn(vulnerabilities);

        mockMvc.perform(get("/api/vulnerabilities/release/{releaseId}", releaseId))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(2));

        verify(vulnerabilityService, times(1)).getVulnerabilitiesByReleaseId(releaseId);
    }

    @Test
    public void getVulnerabilitiesByReleaseId_returnsEmptySet() throws Exception {
        String releaseId = "release-no-vulns";
        when(vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId)).thenReturn(Collections.emptySet());

        mockMvc.perform(get("/api/vulnerabilities/release/{releaseId}", releaseId))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(0));

        verify(vulnerabilityService, times(1)).getVulnerabilitiesByReleaseId(releaseId);
    }

    @Test
    public void getVulnerabilitiesByReleaseId_withSingleVulnerability() throws Exception {
        String releaseId = "release-single";
        VulnerabilityResponse vuln = new VulnerabilityResponse(
                "CVE-2024-0001",
                VulnerabilitySeverity.MEDIUM,
                VulnerabilitySeverity.MEDIUM.getRepresentativeScore(),
                "Information Disclosure",
                Set.of("CWE-200"));
        Set<VulnerabilityResponse> vulnerabilities = Set.of(vuln);

        when(vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId)).thenReturn(vulnerabilities);

        mockMvc.perform(get("/api/vulnerabilities/release/{releaseId}", releaseId))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].cveId").value("CVE-2024-0001"))
                .andExpect(jsonPath("$[0].severity").value("MEDIUM"))
                .andExpect(jsonPath("$[0].cvssScore").value(VulnerabilitySeverity.MEDIUM.getRepresentativeScore()))
                .andExpect(jsonPath("$[0].description").value("Information Disclosure"));

        verify(vulnerabilityService, times(1)).getVulnerabilitiesByReleaseId(releaseId);
    }

    @Test
    public void getVulnerabilitiesByReleaseId_withoutReleaseIdParam_returnsNotFound() throws Exception {
        mockMvc.perform(get("/api/vulnerabilities/release/")).andExpect(status().isNotFound());

        verify(vulnerabilityService, never()).getVulnerabilitiesByReleaseId(any());
    }

    @Test
    public void getVulnerabilitiesByReleaseId_withVulnerabilitiesOfDifferentSeverities() throws Exception {
        String releaseId = "release-mixed-severity";
        VulnerabilityResponse low = new VulnerabilityResponse(
                "CVE-2024-0010",
                VulnerabilitySeverity.LOW,
                VulnerabilitySeverity.LOW.getRepresentativeScore(),
                "Low severity issue",
                Set.of("CWE-1"));
        VulnerabilityResponse medium = new VulnerabilityResponse(
                "CVE-2024-0020",
                VulnerabilitySeverity.MEDIUM,
                VulnerabilitySeverity.MEDIUM.getRepresentativeScore(),
                "Medium severity issue",
                Set.of("CWE-2"));
        VulnerabilityResponse high = new VulnerabilityResponse(
                "CVE-2024-0030",
                VulnerabilitySeverity.HIGH,
                VulnerabilitySeverity.HIGH.getRepresentativeScore(),
                "High severity issue",
                Set.of("CWE-3"));
        VulnerabilityResponse critical = new VulnerabilityResponse(
                "CVE-2024-0040",
                VulnerabilitySeverity.CRITICAL,
                VulnerabilitySeverity.CRITICAL.getRepresentativeScore(),
                "Critical severity issue",
                Set.of("CWE-4"));
        Set<VulnerabilityResponse> vulnerabilities = Set.of(low, medium, high, critical);

        when(vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId)).thenReturn(vulnerabilities);

        mockMvc.perform(get("/api/vulnerabilities/release/{releaseId}", releaseId))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(4));

        verify(vulnerabilityService, times(1)).getVulnerabilitiesByReleaseId(releaseId);
    }

    @Test
    public void getVulnerabilitiesByReleaseId_withVulnerabilityWithMultipleCwes() throws Exception {
        String releaseId = "release-multi-cwe";
        VulnerabilityResponse vuln = new VulnerabilityResponse(
                "CVE-2024-9999",
                VulnerabilitySeverity.HIGH,
                VulnerabilitySeverity.HIGH.getRepresentativeScore(),
                "Multiple weakness types",
                Set.of("CWE-79", "CWE-89", "CWE-352", "CWE-434"));
        Set<VulnerabilityResponse> vulnerabilities = Set.of(vuln);

        when(vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId)).thenReturn(vulnerabilities);

        mockMvc.perform(get("/api/vulnerabilities/release/{releaseId}", releaseId))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].cwes").isArray())
                .andExpect(jsonPath("$[0].cwes.length()").value(4));

        verify(vulnerabilityService, times(1)).getVulnerabilitiesByReleaseId(releaseId);
    }

    @Test
    public void getVulnerabilitiesByReleaseId_withVulnerabilityWithNoCwes() throws Exception {
        String releaseId = "release-no-cwe";
        VulnerabilityResponse vuln = new VulnerabilityResponse(
                "CVE-2024-1111",
                VulnerabilitySeverity.LOW,
                VulnerabilitySeverity.LOW.getRepresentativeScore(),
                "Vulnerability without CWE classification",
                Collections.emptySet());
        Set<VulnerabilityResponse> vulnerabilities = Set.of(vuln);

        when(vulnerabilityService.getVulnerabilitiesByReleaseId(releaseId)).thenReturn(vulnerabilities);

        mockMvc.perform(get("/api/vulnerabilities/release/{releaseId}", releaseId))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].cwes").isArray())
                .andExpect(jsonPath("$[0].cwes.length()").value(0));

        verify(vulnerabilityService, times(1)).getVulnerabilitiesByReleaseId(releaseId);
    }
}
