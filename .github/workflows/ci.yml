name: CI - FF Insights

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [master]

env:
  JDK_VERSION: 21
  NODE_VERSION: 23
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}
    
jobs:
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'temurin'
      - run: mvn clean checkstyle:check
        working-directory: InsightsBackend

  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
        working-directory: InsightsFrontend
      - run: npm run lint
        working-directory: InsightsFrontend

  backend-test:
    name: Backend Unit Test
    runs-on: ubuntu-latest
    needs: [backend-lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
      - run: mvn test --file pom.xml
        working-directory: InsightsBackend

  frontend-test:
    name: Frontend Unit Test
    runs-on: ubuntu-latest
    needs: [frontend-lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: InsightsFrontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('InsightsFrontend/package-lock.json') }}
      - run: npm ci
        working-directory: InsightsFrontend
      - run: npm run test -- --watch=false --browsers=ChromeHeadless
        working-directory: InsightsFrontend

  build-and-push-dev-backend:
    name: Build & Push Dev Backend Image
    runs-on: ubuntu-latest
    needs: [backend-test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Dev Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./InsightsBackend
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/backend:${{ github.sha }}
          
  build-and-push-dev-frontend:
    name: Build & Push Dev Frontend Image
    runs-on: ubuntu-latest
    needs: [frontend-test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Dev Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./InsightsFrontend
          build-args: ENV_CONFIGURATION=development
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/frontend:${{ github.sha }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-push-dev-backend, build-and-push-dev-frontend]
    permissions:
      contents: read
      packages: read
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
      - name: Start Services with Docker Compose
        env:
          IMAGE_TAG: ${{ github.sha }}
          USE_SEEDER: true
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d --wait
      - name: Run Integration Tests
        run: echo "TODO - Add integration test commands here."
      - name: Show Docker Logs on Failure
        if: failure()
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml logs

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    permissions:
      contents: read
      packages: read
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
      - name: Start Services with Docker Compose
        env:
          USE_SEEDER: true
          IMAGE_TAG: ${{ github.sha }}
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d --wait
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Cypress Dependencies
        run: npm ci
        working-directory: ./InsightsFrontend
      - name: Run Cypress E2E Tests
        run: npm run cypress:run
        working-directory: ./InsightsFrontend

  trigger-production-publish:
    name: Trigger Production Publish
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Trigger Docker Publish workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: docker-publish